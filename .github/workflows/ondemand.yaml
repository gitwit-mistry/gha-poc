# This is a basic workflow to help you get started with Actions

name: CI-ondemand

# Controls when the workflow will run
on:
 # Triggers the workflow on push or pull request events but only for the "main" branch
  schedule:
    - cron: '*/5 * * * *'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      tag:
        description: 'Select existing tag'     
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  nightly-builds-tag:
      if : ${{ github.event_name == 'schedule' }}
      name: Create Release
      runs-on: ubuntu-latest
      permissions: write-all
      steps:
        - name: Get current date
          id: date
          run: echo "::set-output name=date::$(date +'%Y-%m-%d-%H-%M')"
        - name: Checkout code
          uses: actions/checkout@v2
        - name: Create Release
          id: create_release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.PAT }}
          with:
            tag_name: 1.develop-nightly-${{ steps.date.outputs.date }}
            release_name: 1.develop-nightly-${{ steps.date.outputs.date }}
            body: |
              Changes in this Release
              - First Change
              - Second Change
            draft: false
            prerelease: false

           
  on-demand-builds-tag:
     if: "${{ github.event.inputs.tag != '' }}"
     name: Create Release for on-demand
     runs-on: ubuntu-latest
     permissions: write-all
     steps:
#        - name: Checkout code
#          uses: actions/checkout@v2
# #        - name: GitHub Tag (with tags filter)
# #          uses: ncipollo/release-action@v1
# #          with:
# #            tag: ${{ github.event.inputs.tag }}"
# #            makeLatest: true
# #            token: ${{ secrets.PAT }}
#        - name: Create Release new
#          id: create_release
#          uses: actions/create-release@v1
#          env:
#            GITHUB_TOKEN: ${{ secrets.PAT }}
#            TAG: mytag-v1
#          with:
#            tag_name: $TAG
#            release_name: ${{ github.event.inputs.tag }}
#            body: |
#              Changes in this Release
#              - First Change
#              - Second Change
#            draft: false
#            prerelease: false
#            make_latest: true
       - name: Test env
         run: |
           echo "MYTAG=date::$(date +'%Y-%m-%d-%H-%M')" >> $GITHUB_OUTPUT
       - name: V22
         run: |
           echo ${MYTAG}
         





